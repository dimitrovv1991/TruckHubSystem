// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TruckHubSystem.Infrastructure.Data;

#nullable disable

namespace TruckHubSystem.Infrastructure.Migrations
{
    [DbContext(typeof(TruckHubDbContext))]
    [Migration("20240422104619_FactoriesSeeded")]
    partial class FactoriesSeeded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "kiu12856-c198-6532-jf28-b893d8395280",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4e7fcdaf-6ba2-4fd4-8543-e17490743914",
                            Email = "guest@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "guest@gmail.com",
                            NormalizedUserName = "guest@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEBLofUUFhg0L5Jie7JXyDWxOKRPqHQlPLyy2/ZP8hVi3mo1yMjPoLpV16pZ/BGpQ4Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0c4a5d9f-523e-4900-a9d6-e1f073165533",
                            TwoFactorEnabled = false,
                            UserName = "guest@gmail.com"
                        },
                        new
                        {
                            Id = "b893d8395280-jf28-6532-c198-kiu12856",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e78d714d-939c-45ad-baac-d9267b633c25",
                            Email = "guest2@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "guest2@gmail.com",
                            NormalizedUserName = "guest2@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAED5YDlGOZkJC3te9OYVWUkw2bDOsSXXlXbgGLlrfv6RPXrTVqy8mVNUTnNrA+awjgA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9c61678c-b23a-4f97-be7a-feb59d0617cb",
                            TwoFactorEnabled = false,
                            UserName = "guest2@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TruckHubSystem.Infrastructure.Data.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BookingCreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Booking creator identifier");

                    b.Property<int>("BookingStatusId")
                        .HasColumnType("int")
                        .HasComment("Booking status identifier");

                    b.Property<int>("DriverId")
                        .HasColumnType("int")
                        .HasComment("Driver identifier");

                    b.Property<int>("LoadId")
                        .HasColumnType("int")
                        .HasComment("Load identifier");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ReceivingFactoryId")
                        .HasColumnType("int")
                        .HasComment("Receiving factory identifier");

                    b.Property<int>("TruckId")
                        .HasColumnType("int")
                        .HasComment("Truck identifier");

                    b.HasKey("Id");

                    b.HasIndex("BookingStatusId");

                    b.HasIndex("DriverId");

                    b.HasIndex("LoadId");

                    b.HasIndex("ReceivingFactoryId");

                    b.HasIndex("TruckId");

                    b.ToTable("Bookings");

                    b.HasComment("Booking");
                });

            modelBuilder.Entity("TruckHubSystem.Infrastructure.Data.Models.BookingStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Booking status indentifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Booking status");

                    b.HasKey("Id");

                    b.ToTable("BookingStatuses");

                    b.HasComment("Booking status");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "In progress"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Completed"
                        });
                });

            modelBuilder.Entity("TruckHubSystem.Infrastructure.Data.Models.CurrentLoad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Load identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FactoryId")
                        .HasColumnType("int");

                    b.Property<int>("LoadId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FactoryId");

                    b.HasIndex("LoadId");

                    b.ToTable("CurrentLoads");
                });

            modelBuilder.Entity("TruckHubSystem.Infrastructure.Data.Models.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Driver identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Driver's family name");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Driver's first name");

                    b.Property<bool>("IsDriverAvailable")
                        .HasColumnType("bit")
                        .HasComment("Is driver available");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Driver's phone number");

                    b.Property<int>("YearDrivingLicenseAcquired")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Drivers");

                    b.HasComment("Driver");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FamilyName = "Georgiev",
                            FirstName = "Georgi",
                            IsDriverAvailable = true,
                            PhoneNumber = "0883442233",
                            YearDrivingLicenseAcquired = 2002
                        },
                        new
                        {
                            Id = 2,
                            FamilyName = "Ivanov",
                            FirstName = "Ivan",
                            IsDriverAvailable = true,
                            PhoneNumber = "0883445566",
                            YearDrivingLicenseAcquired = 2005
                        },
                        new
                        {
                            Id = 3,
                            FamilyName = "Petrov",
                            FirstName = "Petar",
                            IsDriverAvailable = true,
                            PhoneNumber = "0883447788",
                            YearDrivingLicenseAcquired = 2010
                        },
                        new
                        {
                            Id = 4,
                            FamilyName = "Stefanov",
                            FirstName = "Stefan",
                            IsDriverAvailable = true,
                            PhoneNumber = "0883449900",
                            YearDrivingLicenseAcquired = 2015
                        },
                        new
                        {
                            Id = 5,
                            FamilyName = "Vasilev",
                            FirstName = "Vasil",
                            IsDriverAvailable = true,
                            PhoneNumber = "0883441122",
                            YearDrivingLicenseAcquired = 2020
                        });
                });

            modelBuilder.Entity("TruckHubSystem.Infrastructure.Data.Models.Factory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Creator identifier");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Factory name");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Factories");

                    b.HasComment("Factory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatorId = "kiu12856-c198-6532-jf28-b893d8395280",
                            Location = "Shumen",
                            Name = "Ficosotta"
                        },
                        new
                        {
                            Id = 2,
                            CreatorId = "kiu12856-c198-6532-jf28-b893d8395280",
                            Location = "Ruse",
                            Name = "Husqvarna"
                        },
                        new
                        {
                            Id = 3,
                            CreatorId = "b893d8395280-jf28-6532-c198-kiu12856",
                            Location = "Varna",
                            Name = "Plastchim"
                        });
                });

            modelBuilder.Entity("TruckHubSystem.Infrastructure.Data.Models.Load", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Load identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FactoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsLoadAvailable")
                        .HasColumnType("bit")
                        .HasComment("Is load available");

                    b.Property<int>("LoadCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Load name");

                    b.Property<int>("Weigth")
                        .HasColumnType("int")
                        .HasComment("Load weight");

                    b.HasKey("Id");

                    b.HasIndex("FactoryId");

                    b.HasIndex("LoadCategoryId");

                    b.ToTable("Loads");

                    b.HasComment("Load");
                });

            modelBuilder.Entity("TruckHubSystem.Infrastructure.Data.Models.LoadCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Category Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Load category");

                    b.HasKey("Id");

                    b.ToTable("LoadCategories");

                    b.HasComment("Load category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Building materials"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Foods"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Medical Supplies"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Chemicals"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Automotive"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Textiles"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Others"
                        });
                });

            modelBuilder.Entity("TruckHubSystem.Infrastructure.Data.Models.LoadReceived", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Load identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FactoryId")
                        .HasColumnType("int");

                    b.Property<int>("LoadId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FactoryId");

                    b.HasIndex("LoadId");

                    b.ToTable("LoadsReceived");
                });

            modelBuilder.Entity("TruckHubSystem.Infrastructure.Data.Models.LoadSent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Load identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FactoryId")
                        .HasColumnType("int");

                    b.Property<int>("LoadId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FactoryId");

                    b.HasIndex("LoadId");

                    b.ToTable("LoadsSent");
                });

            modelBuilder.Entity("TruckHubSystem.Infrastructure.Data.Models.Truck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Truck Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Available")
                        .HasColumnType("bit")
                        .HasComment("Is truck available");

                    b.Property<int>("CapacityKg")
                        .HasColumnType("int")
                        .HasComment("Capacity in kilograms");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Truck image url");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("License plate number");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Manufactrurer");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Model");

                    b.Property<int>("YearManufactured")
                        .HasColumnType("int")
                        .HasComment("Year manufactured");

                    b.HasKey("Id");

                    b.ToTable("Trucks");

                    b.HasComment("Truck");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Available = true,
                            CapacityKg = 14000,
                            ImageUrl = "https://content.presspage.com/uploads/2678/6a533810-4bd3-4c85-b7cc-cefe06c5ef1c/1920_njitransport-5.jpg",
                            LicensePlate = "P7777PP",
                            Manufacturer = "Man",
                            Model = "TGX",
                            YearManufactured = 2021
                        },
                        new
                        {
                            Id = 2,
                            Available = true,
                            CapacityKg = 15000,
                            ImageUrl = "https://autobild.bg/wp-content/uploads/2020/09/Actros-Edition-2-3.jpg",
                            LicensePlate = "C1234CC",
                            Manufacturer = "Mercedes-Benz",
                            Model = "Actros",
                            YearManufactured = 2022
                        },
                        new
                        {
                            Id = 3,
                            Available = true,
                            CapacityKg = 13000,
                            ImageUrl = "http://www.autoconsulting.com.ua/pictures/others/2019/Volvo_FH_iSave_01.jpg",
                            LicensePlate = "PB5678BB",
                            Manufacturer = "Volvo",
                            Model = "FH",
                            YearManufactured = 2020
                        },
                        new
                        {
                            Id = 4,
                            Available = true,
                            CapacityKg = 12000,
                            ImageUrl = "https://autobild.bg/wp-content/uploads/2021/11/DAF-XF-Hydrogen_Truck-Innovation-Award.jpg",
                            LicensePlate = "B9999BB",
                            Manufacturer = "DAF",
                            Model = "XF",
                            YearManufactured = 2019
                        },
                        new
                        {
                            Id = 5,
                            Available = true,
                            CapacityKg = 13500,
                            ImageUrl = "https://img.carswp.com/scania/r-series/scania_r-series_2014_images_1.jpg",
                            LicensePlate = "A1111AA",
                            Manufacturer = "Scania",
                            Model = "R Series",
                            YearManufactured = 2021
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TruckHubSystem.Infrastructure.Data.Models.Booking", b =>
                {
                    b.HasOne("TruckHubSystem.Infrastructure.Data.Models.BookingStatus", "BookingStatus")
                        .WithMany("Bookings")
                        .HasForeignKey("BookingStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TruckHubSystem.Infrastructure.Data.Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TruckHubSystem.Infrastructure.Data.Models.Load", "Load")
                        .WithMany()
                        .HasForeignKey("LoadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TruckHubSystem.Infrastructure.Data.Models.Factory", "ReceivingFactory")
                        .WithMany()
                        .HasForeignKey("ReceivingFactoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TruckHubSystem.Infrastructure.Data.Models.Truck", "Truck")
                        .WithMany()
                        .HasForeignKey("TruckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingStatus");

                    b.Navigation("Driver");

                    b.Navigation("Load");

                    b.Navigation("ReceivingFactory");

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("TruckHubSystem.Infrastructure.Data.Models.CurrentLoad", b =>
                {
                    b.HasOne("TruckHubSystem.Infrastructure.Data.Models.Factory", "Factory")
                        .WithMany()
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TruckHubSystem.Infrastructure.Data.Models.Load", "Load")
                        .WithMany()
                        .HasForeignKey("LoadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Factory");

                    b.Navigation("Load");
                });

            modelBuilder.Entity("TruckHubSystem.Infrastructure.Data.Models.Factory", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("TruckHubSystem.Infrastructure.Data.Models.Load", b =>
                {
                    b.HasOne("TruckHubSystem.Infrastructure.Data.Models.Factory", "Factory")
                        .WithMany()
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TruckHubSystem.Infrastructure.Data.Models.LoadCategory", "LoadCategory")
                        .WithMany("Loads")
                        .HasForeignKey("LoadCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Factory");

                    b.Navigation("LoadCategory");
                });

            modelBuilder.Entity("TruckHubSystem.Infrastructure.Data.Models.LoadReceived", b =>
                {
                    b.HasOne("TruckHubSystem.Infrastructure.Data.Models.Factory", "Factory")
                        .WithMany()
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TruckHubSystem.Infrastructure.Data.Models.Load", "Load")
                        .WithMany()
                        .HasForeignKey("LoadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Factory");

                    b.Navigation("Load");
                });

            modelBuilder.Entity("TruckHubSystem.Infrastructure.Data.Models.LoadSent", b =>
                {
                    b.HasOne("TruckHubSystem.Infrastructure.Data.Models.Factory", "Factory")
                        .WithMany()
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TruckHubSystem.Infrastructure.Data.Models.Load", "Load")
                        .WithMany()
                        .HasForeignKey("LoadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Factory");

                    b.Navigation("Load");
                });

            modelBuilder.Entity("TruckHubSystem.Infrastructure.Data.Models.BookingStatus", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("TruckHubSystem.Infrastructure.Data.Models.LoadCategory", b =>
                {
                    b.Navigation("Loads");
                });
#pragma warning restore 612, 618
        }
    }
}
